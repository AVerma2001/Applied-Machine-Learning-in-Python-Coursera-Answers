WEEK 4 Assignment    

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error


def engagement_model():
    from sklearn.model_selection import train_test_split, GridSearchCV
    from sklearn.linear_model import LogisticRegression
    from sklearn.ensemble import RandomForestClassifier
    from sklearn.metrics import roc_curve, auc
    
    
    train = pd.read_csv('assets/train.csv')
    train_X = train[train.columns[1:9]]
    train_y = train.iloc[:,9:]
    test = pd.read_csv('assets/test.csv')
    
    X_train, X_test, y_train, y_test = train_test_split(train_X, train_y,train_size=0.80, test_size=0.20,random_state=0)
    class_rf = RandomForestClassifier()
    grid_values = {'n_estimators':[10,100],'max_depth':[None, 30]}
    grid_clf_auc = GridSearchCV(class_rf, param_grid=grid_values,scoring='roc_auc')
    grid_clf_auc.fit(X_train,y_train)
    print('Grid best parameter (max.AUC): ' , grid_clf_auc.best_params_)
    print('Grid best score (AUC): ', grid_clf_auc.best_score_)
    
    #predict_test = grid_clf_auc.predict_proba(test[test.columns[1:9]])
    predict_test = grid_clf_auc.predict_proba(test[test.columns[1:9]])
    predict_test = predict_test[:,1]
    #return pd.Series(predict_test,index=[test.iloc[:,0]])
    #return pd.Series(predict_test,index=test.iloc[:,0])
    engagement = pd.Series(predict_test,index=test.iloc[:,0])
    return engagement

engagement_model()
