WEEK 2 Assignment

Question 1

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split


np.random.seed(0)
n = 15
x = np.linspace(0,10,n) + np.random.randn(n)/5
y = np.sin(x)+x/6 + np.random.randn(n)/10


X_train, X_test, y_train, y_test = train_test_split(x, y, random_state=0)

def intro():
    %matplotlib inline

    plt.figure()
    plt.scatter(X_train, y_train, label='training data')
    plt.scatter(X_test, y_test, label='test data')
    plt.legend(loc=4);

intro()

def answer_one():
    from sklearn.linear_model import LinearRegression
    from sklearn.preprocessing import PolynomialFeatures

    DEGREES = [1, 3, 6, 9]
    N_POINTS = 100
    result = np.zeros([len(DEGREES), N_POINTS])
    predict = np.linspace(0, 10, N_POINTS).reshape(-1, 1)
    X_tr = X_train.reshape(-1, 1)  
    
    for i, deg in enumerate(DEGREES):
        
        poly = PolynomialFeatures(degree=deg)
        X_ = poly.fit_transform(X_tr)
        predict_ = poly.fit_transform(predict)
        reg = LinearRegression()
        reg.fit(X_, y_train)
        result[i, :] = reg.predict(predict_)
    
    return result

Question 2
def answer_two():
    from sklearn.linear_model import LinearRegression
    from sklearn.preprocessing import PolynomialFeatures
    from sklearn.metrics import r2_score

    DEGREES = np.arange(0, 10)
    r2_train = np.zeros([len(DEGREES)])
    r2_test = np.zeros([len(DEGREES)])
    
    X_tr = X_train.reshape(-1, 1)
    X_tst = X_test.reshape(-1, 1)
    
    for i, deg in enumerate(DEGREES):
        
        poly = PolynomialFeatures(degree=deg)
        X_tr_ = poly.fit_transform(X_tr)
        X_tst_ = poly.transform(X_tst)
        reg = LinearRegression()
        reg.fit(X_tr_, y_train)
        r2_train[i] = r2_score(y_train, reg.predict(X_tr_))
        r2_test[i] = r2_score(y_test, reg.predict(X_tst_))      
    
    return r2_train, r2_test

answer_two()

Question 3
def answer_three():
    
    # Read in the results of answer_two
    r2_train, r2_test = answer_two()
    
    # Sort the scores
    r2_train_sorted = np.sort(r2_train)
    r2_test_sorted = np.sort(r2_test)
    
    # Initialize the values
    Underfitting = 0
    Overfitting = 0
    Good_Generalization = 0
    min_r2_train = np.min(r2_train)
    max_r2_train = np.max(r2_train)
    min_r2_test = np.max(r2_test)
    max_r2_test = np.max(r2_test)    
    
    for deg, data in enumerate(zip(r2_train, r2_test)):
        if data[0] < r2_train_sorted[5] and data[1] < r2_test_sorted[5]:
            Underfitting = deg
        if data[0] >= r2_train_sorted[5] and data[1] < r2_test_sorted[5]:
            Overfitting = deg
        if data[0] >= r2_train_sorted[5] and data[1] >= r2_test_sorted[7]:
            Good_Generalization = deg
    
    return Underfitting, Overfitting, Good_Generalization

answer_three()

Question 4
def answer_four():
    from sklearn.preprocessing import PolynomialFeatures
    from sklearn.linear_model import Lasso, LinearRegression
    from sklearn.metrics import r2_score

    # Constants
    ALPHA=0.01
    MAX_ITER=10000
    DEGREE = 12
    
    # Set up data
    X_tr = X_train.reshape(-1, 1)
    X_tst = X_test.reshape(-1, 1)
    poly = PolynomialFeatures(degree=DEGREE)
    X_tr_ = poly.fit_transform(X_tr)
    X_tst_ = poly.transform(X_tst)

    
    # Fit OLS
    ols = LinearRegression()
    ols.fit(X_tr_, y_train)
    LinearRegression_R2_test_score = r2_score(y_test, ols.predict(X_tst_))  
    
    # Fit Lasso
    linlasso = Lasso(alpha=ALPHA, max_iter = MAX_ITER , tol = 0.1).fit(X_tr_, y_train)
    Lasso_R2_test_score = r2_score(y_test, linlasso.predict(X_tst_))
    

    return LinearRegression_R2_test_score, Lasso_R2_test_score

answer_four()

Question 5
def answer_five():
    from sklearn.tree import DecisionTreeClassifier

    clf = DecisionTreeClassifier(random_state=0).fit(X_train2, y_train2)
    #top_five = clf.feature_importances_.argsort()[-5:]
    top_five = clf.feature_importances_.argsort()[::-1][:5]   
    result = list(X_train2.columns[top_five])

    return result

answer_five()

Question 6
def answer_six():
    from sklearn.svm import SVC
    from sklearn.model_selection import validation_curve
    
    param_rang = np.logspace(-4,1,6)

    clf = SVC(kernel = 'rbf', C = 1, random_state=0)
    
    train_scores, test_scores = validation_curve(clf, X_mush, y_mush, 
                                                 param_name='gamma', 
                                                 param_range=param_rang, cv=3, scoring="accuracy")

    training_scores = np.mean(train_scores, axis=1)
    testing_scores = np.mean(test_scores, axis=1)
    return training_scores, testing_scores

answer_six()

Question 7
def answer_seven():
    
    # Your code here
     param_range = np.logspace(-4,1,6)
    
     print(param_range)
    
     return (1.00000000e-04, 1.00000000e+01, 1.00000000e-01)
answer_seven()
